<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thinksea</name>
    </assembly>
    <members>
        <member name="T:Thinksea.Collections.RepeatSortedDictionary`2">
            <summary>
            按键排序的键/值对集合（支持重复键）。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
        </member>
        <member name="T:Thinksea.Collections.RepeatSortedDictionary`2.KeyValuePair">
            <summary>
            一个键/值对描述。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.KeyValuePair.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.KeyValuePair.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.KeyValuePair.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.KeyValuePair.#ctor(`0,`1)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="T:Thinksea.Collections.RepeatSortedDictionary`2.Item">
            <summary>
            用于包装指定项目的类。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.Item.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.RepeatSortedDictionary`2.Item._SubItems">
            <summary>
            一个集合，用于存储子项目。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.Item.SubItems">
            <summary>
            一个集合，用于存储子项目。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.Item.HasSubItems">
            <summary>
            获取一个值指示是否有子项目。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Item.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Item.#ctor(`1)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Item.AddSubItem(`1)">
            <summary>
            添加一个值到集合末尾。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="F:Thinksea.Collections.RepeatSortedDictionary`2.Items">
            <summary>
            项目集合。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.Count">
            <summary>
            集合中的项目数量。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            一个构造方法。
            </summary>
            <param name="comparer">在比较键时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现；或者为 null，表示为键类型使用默认的 System.Collections.Generic.Comparer&lt;T&gt;。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Add(`0,`1)">
            <summary>
            添加指定的键和项目到集合中。
            </summary>
            <param name="key">键。</param>
            <param name="value">项目。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Clear">
            <summary>
            从集合中清空全部项目。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.ContainsKey(`0)">
            <summary>
            判断集合中是否包含指定的键。
            </summary>
            <param name="key">键。</param>
            <returns>包含返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.ContainsValue(`1)">
            <summary>
            判断集合中是否包含指定的项目。
            </summary>
            <param name="value">项目。</param>
            <returns>包含返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.ContainsValue(`0,`1)">
            <summary>
            判断集合中是否包含指定的项目。
            </summary>
            <param name="key">与之匹配的键。</param>
            <param name="value">项目。</param>
            <returns>包含返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            将集合中的所有内容复制到指定的数组中，第一个项目将被复制到集合中由参数 index 指定的索引位置。
            </summary>
            <param name="array">数组。</param>
            <param name="index">起始索引。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Remove(`0)">
            <summary>
            从集合中移除与指定键匹配的项目。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.Remove(`0,`1)">
            <summary>
            从集合中移除使用指定键的特定项目。
            </summary>
            <param name="key">键。</param>
            <param name="value">项目。</param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.RemoveFirst">
            <summary>
            从集合中移除第一个项目。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.GetValues(`0)">
            <summary>
            获取指定键所对应的项目列表。
            </summary>
            <param name="key">键。</param>
            <returns>找不到返回 null。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.TryGetFirstValue(`1@)">
            <summary>
            尝试获取集合中的第一个项目。
            </summary>
            <param name="value">返回的项目，找不到则返回此数据类型的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedDictionary`2.GetFirst">
            <summary>
            获取集合中的第一个项目。
            </summary>
            <returns>找不到则返回 null。</returns>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.Keys">
            <summary>
            键列表。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedDictionary`2.Values">
            <summary>
            项目列表。
            </summary>
        </member>
        <member name="T:Thinksea.Collections.RepeatSortedWaitQueue`2">
            <summary>
            允许按照指定的键进行排序的等待模式任务队列。（允许添加重复键）
            </summary>
            <remarks>
            当有新的任务添加到队列中时，用于处理队列的方法将得到通知，否则处于等待状态。
            这与轮询方式不同，可以占用更少的系统资源，更及时的得到通知。
            适用于多线程添加任务单线程处理任务，单线程添加任务多线程处理任务，多线程添加任务多线程处理任务。
            方法对跨线程操作是安全的。
            </remarks>
        </member>
        <member name="F:Thinksea.Collections.RepeatSortedWaitQueue`2.Event">
            <summary>
            一个事件通知，用于通知消费者有新的数据到来。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.RepeatSortedWaitQueue`2.datas">
            <summary>
            一个集合，用于存储数据。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.RepeatSortedWaitQueue`2.datasRWLock">
            <summary>
            队列锁。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedWaitQueue`2.MaxSize">
            <summary>
            队列最大长度上限。取值为 -1 表示无限制。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.RepeatSortedWaitQueue`2.Count">
            <summary>
            获取集合中实际包含的对象数。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.#ctor(System.Int32)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="maxSize">队列最大长度上限。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="comparer">在比较键时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现；或者为 null，表示为键类型使用默认的 System.Collections.Generic.Comparer&lt;T&gt;。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="maxSize">队列最大长度上限。</param>
            <param name="comparer">在比较键时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现；或者为 null，表示为键类型使用默认的 System.Collections.Generic.Comparer&lt;T&gt;。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Add(`0,`1)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="key">用其进行排序的键。</param>
            <param name="value">待添加对象。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Clear">
            <summary>
            从集合中清除全部对象。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Remove(`0,`1)">
            <summary>
            从集合中移除指定的对象。
            </summary>
            <param name="key">用其进行排序的键。</param>
            <param name="value">待移除对象。</param>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Get">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程无限期等待，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Get(System.Int32)">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Watching">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Watching(System.Int32)">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.RepeatSortedWaitQueue`2.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="key">用其进行排序的键。</param>
            <returns>找不到返回 false；否则返回 true。</returns>
        </member>
        <member name="T:Thinksea.Collections.SerializableDictionary`2">
            <summary>
            定义一个可序列化的 Dictionary 对象。
            
            </summary>
            <typeparam name="TKey">键值对中键的数据类型。</typeparam>
            <typeparam name="TValue">键值对中值的数据类型。</typeparam>
            <remarks>
            .NET framework 自带的键值对集合对象“<see cref="T:System.Collections.Generic.Dictionary`2"/>”未提供 XML 序列化功能。此方法旨在解决此问题。
            </remarks>
        </member>
        <member name="M:Thinksea.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            获取架构信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            读取 XML 数据。
            </summary>
            <param name="reader">XML 数据读取器。</param>
        </member>
        <member name="M:Thinksea.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            写入 XML 数据。
            </summary>
            <param name="writer">XML 数据写入器。</param>
        </member>
        <member name="T:Thinksea.Collections.SortedWaitQueue`2">
            <summary>
            允许按照指定的键进行排序的等待模式任务队列。（禁止添加重复键）
            </summary>
            <remarks>
            当有新的任务添加到队列中时，用于处理队列的方法将得到通知，否则处于等待状态。
            这与轮询方式不同，可以占用更少的系统资源，更及时的得到通知。
            适用于多线程添加任务单线程处理任务，单线程添加任务多线程处理任务，多线程添加任务多线程处理任务。
            方法对跨线程操作是安全的。
            </remarks>
        </member>
        <member name="F:Thinksea.Collections.SortedWaitQueue`2.Event">
            <summary>
            一个事件通知，用于通知消费者有新的数据到来。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.SortedWaitQueue`2.datas">
            <summary>
            一个集合，用于存储数据。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.SortedWaitQueue`2.datasRWLock">
            <summary>
            队列锁。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.SortedWaitQueue`2.MaxSize">
            <summary>
            队列最大长度上限。取值为 -1 表示无限制。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.SortedWaitQueue`2.Count">
            <summary>
            获取集合中实际包含的对象数。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.#ctor(System.Int32)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="maxSize">队列最大长度上限。</param>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="comparer">在比较键时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现；或者为 null，表示为键类型使用默认的 System.Collections.Generic.Comparer&lt;T&gt;。</param>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="maxSize">队列最大长度上限。</param>
            <param name="comparer">在比较键时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现；或者为 null，表示为键类型使用默认的 System.Collections.Generic.Comparer&lt;T&gt;。</param>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Add(`0,`1)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="key">用其进行排序的键（不允许重复）。</param>
            <param name="value">待添加对象。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Clear">
            <summary>
            从集合中清除全部对象。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Remove(`0)">
            <summary>
            从集合中移除指定的对象。
            </summary>
            <param name="key">用其进行排序的键。</param>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Get">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程无限期等待，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Get(System.Int32)">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Watching">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Watching(System.Int32)">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="key">用其进行排序的键。</param>
            <returns>找不到返回 false；否则返回 true。</returns>
        </member>
        <member name="M:Thinksea.Collections.SortedWaitQueue`2.GetEnumerator">
            <summary>
            返回循环访问成员的枚举器。
            </summary>
            <returns>可供循环访问的枚举接口。</returns>
        </member>
        <member name="T:Thinksea.Collections.Task`1">
            <summary>
            任务描述类。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.Task`1.Work">
            <summary>
            任务。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.Task`1._RunTime">
            <summary>
            任务启动时间。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.Task`1.RunTime">
            <summary>
            获取或设置任务启动时间。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.Task`1.#ctor(`0)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="work">任务。</param>
        </member>
        <member name="M:Thinksea.Collections.Task`1.#ctor(`0,System.DateTime)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="work">任务。</param>
            <param name="runTime">任务启动时间。</param>
        </member>
        <member name="F:Thinksea.Collections.Task`1.OwnerSortedTaskQueue">
            <summary>
            所属的任务队列。
            </summary>
        </member>
        <member name="T:Thinksea.Collections.TaskQueue`1">
            <summary>
            带启动时间的等待模式任务队列。
            </summary>
            <remarks>
            当有新的任务添加到队列中时，用于处理队列的方法将得到通知，否则处于等待状态。
            这与轮询方式不同，可以占用更少的系统资源，更及时的得到通知。
            适用于多线程添加任务单线程处理任务，单线程添加任务多线程处理任务，多线程添加任务多线程处理任务。
            方法对跨线程操作是安全的。
            </remarks>
        </member>
        <member name="F:Thinksea.Collections.TaskQueue`1.Event">
            <summary>
            一个事件通知，用于通知消费者有新的数据到来。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.TaskQueue`1.datas">
            <summary>
            一个集合，用于存储数据。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.TaskQueue`1.datasRWLock">
            <summary>
            队列锁。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.TaskQueue`1.MaxSize">
            <summary>
            队列最大长度上限。取值为 -1 表示无限制。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.TaskQueue`1.Count">
            <summary>
            获取集合中实际包含的对象数。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.SetTaskRunTime(Thinksea.Collections.Task{`0},System.DateTime)">
            <summary>
            当指定的项目的数据产生变更时，更新指定项目的排序情况。
            </summary>
            <param name="item">待处理对象。</param>
            <param name="newRunTime">新的启动时间。</param>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.#ctor(System.Int32)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="maxSize">队列最大长度上限。</param>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Add(Thinksea.Collections.Task{`0})">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="item">待添加对象。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.AddOnly(Thinksea.Collections.Task{`0},System.Predicate{Thinksea.Collections.Task{`0}})">
            <summary>
            当集合中不存在指定的对象时，将对象添加到集合的结尾处。
            </summary>
            <param name="item">待添加对象。</param>
            <param name="match">用于确定对象是否已经在集合中的匹配器。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
            <remarks>
            此方法在执行时，首先在集合中查找与待添加对象匹配的元素（通过执行比较器来确定是否匹配），对于已经存在匹配项的情况认为添加成功，返回 true，否则执行添加操作。
            </remarks>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Clear">
            <summary>
            从集合中清除全部对象。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Remove(Thinksea.Collections.Task{`0})">
            <summary>
            从集合中移除指定的对象。
            </summary>
            <param name="item">待移除的对象。</param>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Get">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程无限期等待，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果超时则返回 null。</returns>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Get(System.Int32)">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果超时则返回 null。</returns>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Watching">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果超时则返回 null。</returns>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Watching(System.Int32)">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果超时则返回 null。</returns>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Contains(Thinksea.Collections.Task{`0})">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">要在集合中定位的对象。</param>
            <returns>找不到返回 false；否则返回 true。</returns>
        </member>
        <member name="M:Thinksea.Collections.TaskQueue`1.Find(System.Predicate{Thinksea.Collections.Task{`0}})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个集合中的相匹配的第一个元素。
            </summary>
            <param name="match">用于定义要搜索的元素的条件。</param>
            <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 T 的默认值。</returns>
        </member>
        <member name="T:Thinksea.Collections.WaitQueue`1">
            <summary>
            等待模式任务队列。
            </summary>
            <remarks>
            当有新的任务添加到队列中时，用于处理队列的方法将得到通知，否则处于等待状态。
            这与轮询方式不同，可以占用更少的系统资源，更及时的得到通知。
            适用于多线程添加任务单线程处理任务，单线程添加任务多线程处理任务，多线程添加任务多线程处理任务。
            方法对跨线程操作是安全的。
            </remarks>
        </member>
        <member name="F:Thinksea.Collections.WaitQueue`1.Event">
            <summary>
            一个事件通知，用于通知消费者有新的数据到来。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.WaitQueue`1.datas">
            <summary>
            一个集合，用于存储数据。
            </summary>
        </member>
        <member name="F:Thinksea.Collections.WaitQueue`1.datasRWLock">
            <summary>
            队列锁。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.WaitQueue`1.MaxSize">
            <summary>
            队列最大长度上限。取值为 -1 表示无限制。
            </summary>
        </member>
        <member name="P:Thinksea.Collections.WaitQueue`1.Count">
            <summary>
            获取集合中实际包含的对象数。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.#ctor(System.Int32)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="maxSize">队列最大长度上限。</param>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Add(`0)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="item">待添加对象。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.AddOnly(`0)">
            <summary>
            当集合中不存在指定的对象时，将对象添加到集合的结尾处。
            </summary>
            <param name="item">待添加对象。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
            <remarks>
            此方法在执行时，首先在集合中查找与待添加对象匹配的元素，对于已经存在匹配项的情况认为添加成功，返回 true，否则执行添加操作。
            </remarks>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.AddOnly(`0,System.Predicate{`0})">
            <summary>
            当集合中不存在指定的对象时，将对象添加到集合的结尾处。
            </summary>
            <param name="item">待添加对象。</param>
            <param name="match">用于确定对象是否已经在集合中的匹配器。</param>
            <returns>添加成功返回 true；否则返回 false。</returns>
            <remarks>
            此方法在执行时，首先在集合中查找与待添加对象匹配的元素（通过执行比较器来确定是否匹配），对于已经存在匹配项的情况认为添加成功，返回 true，否则执行添加操作。
            </remarks>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Clear">
            <summary>
            从集合中清除全部对象。
            </summary>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Remove(`0)">
            <summary>
            从集合中移除指定的对象。
            </summary>
            <param name="item">待移除的对象。</param>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Get">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程无限期等待，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Get(System.Int32)">
            <summary>
            移除并返回位于集合开始处的对象，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Watching">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到有可用数据为止。
            </summary>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Watching(System.Int32)">
            <summary>
            返回位于集合开始处的对象，但不将其移除，如果没有可用的对象返回则导致当前线程等待指定的时间量，直到超时或者有可用数据为止。
            </summary>
            <param name="millisecondsTimeout">等待超时时间量。</param>
            <returns>返回可用的对象，如果不存在则返回表示为空的值（这对于引用类型为 null，对于值类型为零）。</returns>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">要在集合中定位的对象。对于引用类型，改值可以为 null。</param>
            <returns>找不到返回 false；否则返回 true。</returns>
            <remarks>
            如果您的代码中频繁调用此方法请考虑使用 SortedWaitQueue 或 RepeatSortedWaitQueue 类实现功能需求或许能够带来更好的性能。
            </remarks>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.Find(System.Predicate{`0},`0@)">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个集合中的相匹配的第一个元素。
            </summary>
            <param name="match">用于定义要搜索的元素的条件。</param>
            <param name="result">返回找到的项目。</param>
            <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Thinksea.Collections.WaitQueue`1.GetEnumerator">
            <summary>
            返回循环访问成员的枚举数。
            </summary>
            <returns>可供循环访问的枚举接口。</returns>
        </member>
        <member name="T:Thinksea.CRC.CRC32">
            <summary>
            提供 CRC 冗余效验算法。
            </summary>
            <remarks>
            这个类完全符合 CLS，除非另外注明。
            它将对 System.UInt32, System.Int64, 和 System.Int32 这些类型进行操作。
            所有数据在内部使用 UInt32 变量表示。
            </remarks>
        </member>
        <member name="F:Thinksea.CRC.CRC32.TABLE_SIZE">
            <summary>
            CRC 表的大小( 256 )。
            </summary>
        </member>
        <member name="F:Thinksea.CRC.CRC32.STANDARD_POLYNOMIAL">
            <summary>
            标准的 CRC32 算法的多项式。
            </summary>
        </member>
        <member name="P:Thinksea.CRC.CRC32.Initialized">
            <summary>
            获取一个值，指示 CRC 表是否已经初始化。
            </summary>
        </member>
        <member name="F:Thinksea.CRC.CRC32._Polynomial">
            <summary>
            提供在检查期间使用的 CRC 多项式的内部存储。
            </summary>
        </member>
        <member name="P:Thinksea.CRC.CRC32.Polynomial">
            <summary>
            获取当前使用的多项式。
            </summary>
            <remarks>
            这个属性不符合 CLS。
            </remarks>
        </member>
        <member name="F:Thinksea.CRC.CRC32.table">
            <summary>
            存储 CRC 表。
            </summary>
        </member>
        <member name="M:Thinksea.CRC.CRC32.#ctor">
            <summary>
            一个构造方法。用标准的 CRC 多项式初始化 CRC 表。
            </summary>
        </member>
        <member name="M:Thinksea.CRC.CRC32.#ctor(System.Int32)">
            <summary>
            一个构造方法。用指定的 CRC 多项式初始化 CRC 表。
            </summary>
            <remarks>
            一个初始化变量的方法，在你允许调用 Crc32 方法之前必须调用此方法。
            用指定的多项式初始化 CRC 表。
            </remarks>
            <param name="polynomial">初始化表时使用的多项式。</param>
        </member>
        <member name="M:Thinksea.CRC.CRC32.#ctor(System.Int64)">
            <summary>
            一个构造方法。用指定的 CRC 多项式初始化 CRC 表。
            </summary>
            <remarks>
            一个初始化变量的方法，在你允许调用 Crc32 方法之前必须调用此方法。
            用指定的多项式初始化 CRC 表。
            </remarks>
            <param name="polynomial">初始化表时使用的多项式。</param>
        </member>
        <member name="M:Thinksea.CRC.CRC32.#ctor(System.UInt32)">
            <summary>
            一个构造方法。用指定的 CRC 多项式初始化 CRC 表。
            </summary>
            <remarks>
            一个初始化变量的方法，在你允许调用 Crc32 方法之前必须调用此方法。
            用指定的多项式初始化 CRC 表。
            </remarks>
            <param name="polynomial">初始化表时使用的多项式。</param>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Init">
            <summary>
            用标准的 CRC 多项式初始化 CRC 表。
            </summary>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Init(System.Int32)">
            <summary>
            用指定的 CRC 多项式初始化 CRC 表。
            </summary>
            <remarks>
            一个初始化变量的方法，在你允许调用 Crc32 方法之前必须调用此方法。
            用指定的多项式初始化 CRC 表。
            </remarks>
            <param name="polynomial">初始化表时使用的多项式。</param>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Init(System.Int64)">
            <summary>
            用指定的 CRC 多项式初始化 CRC 表。
            </summary>
            <remarks>
            一个初始化变量的方法，在你允许调用 Crc32 方法之前必须调用此方法。
            用指定的多项式初始化 CRC 表。
            </remarks>
            <param name="polynomial">初始化表时使用的多项式。</param>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Init(System.UInt32)">
            <summary>
            用指定的 CRC 多项式初始化 CRC 表。
            </summary>
            <remarks>
            一个初始化变量的方法，在你允许调用 Crc32 方法之前必须调用此方法。
            用指定的多项式初始化 CRC 表。
            </remarks>
            <param name="polynomial">初始化表时使用的多项式。</param>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Crc32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算 bytes 类型数组的循环冗余效验。
            </summary>
            <param name="data">检查的数据。</param>
            <param name="offset">data 中的字节偏移量，从此处开始读取。</param>
            <param name="count">最多读取的字节数。</param>
            <returns>
            一个4比特数组存贮的 CRC 数据。
            </returns>
            <remarks>
            使用 System.BitConverter 类转换这个字节数组为有效格式。
            </remarks>
            <exception cref="T:System.InvalidOperationException">如果 CRC 表没被初始化（调用 Crc32 重载之前调用一个Init()重载方法）则引发此异常。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">参数 offset 超出数组 data 最大索引范围。</exception>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Crc32(System.Byte[])">
            <summary>
            计算 bytes 类型数组的循环冗余效验。
            </summary>
            <param name="data">检查的数据。</param>
            <returns>
            一个4比特数组存贮的 CRC 数据。
            </returns>
            <remarks>
            使用 System.BitConverter 类转换这个字节数组为有效格式。
            </remarks>
            <exception cref="T:System.InvalidOperationException">如果 CRC 表没被初始化（调用 Crc32 重载之前调用一个Init()重载方法）则引发此异常。</exception>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Crc32(System.String)">
            <summary>
            计算 string 类型数据的循环冗余效验。使用 ASCII 格式。
            </summary>
            <param name="data">检查的字符串。</param>
            <returns>一个4比特数组存贮的 CRC 数据。</returns>
            <remarks>
            使用 System.BitConverter 类转换这个字节数组为有效格式。
            </remarks>
            <exception cref="T:System.InvalidOperationException">如果 CRC 表没被初始化（调用 Crc32 重载之前调用一个Init()重载方法）则引发此异常。</exception>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Crc32(System.String,System.Text.Encoding)">
            <summary>
            计算 string 类型数据的循环冗余效验。使用指定的编码方案。
            </summary>
            <param name="data">检查的字符串。</param>
            <param name="encoding">使用的编码方案。</param>
            <returns>一个4比特数组存贮的 CRC 数据。</returns>
            <remarks>
            使用 System.BitConverter 类转换这个字节数组为有效格式。
            </remarks>
            <exception cref="T:System.InvalidOperationException">如果 CRC 表没被初始化（调用 Crc32 重载之前调用一个Init()重载方法）则引发此异常。</exception>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Crc32OfFile(System.String,System.Int32)">
            <summary>
            计算一个文件数据的循环冗余效验。使用指定的编码方案。
            </summary>
            <param name="file">文件。</param>
            <param name="buffLength">允许使用的缓冲区大小。</param>
            <returns></returns>
            <remarks>
            计算循环冗余效验码时文件长度也在计算之内。
            </remarks>
        </member>
        <member name="M:Thinksea.CRC.CRC32.Crc32OfFile(System.String)">
            <summary>
            计算一个文件数据的循环冗余效验。使用指定的编码方案。
            </summary>
            <param name="file">文件。</param>
            <returns></returns>
            <remarks>
            计算循环冗余效验码时文件长度也在计算之内。
            </remarks>
        </member>
        <member name="T:Thinksea.Drawing.GraphicsArithmetic">
            <summary>
            封装了常用图形算法。
            </summary>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.DistancePointToPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算点到点的距离。
            </summary>
            <param name="x1">第1个点的水平坐标。</param>
            <param name="y1">第1个点的垂直坐标。</param>
            <param name="x2">第2个点的水平坐标。</param>
            <param name="y2">第2个点的垂直坐标。</param>
            <returns>两个点之间的距离。</returns>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.DistancePointToLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算点到直线的最短距离(利用平行四边形的面积算法)
            </summary>
            <param name="x">目标点的水平坐标。</param>
            <param name="y">目标点的垂直坐标。</param>
            <param name="x1">直线上的第1个点的水平坐标。</param>
            <param name="y1">直线上的第1个点的垂直坐标。</param>
            <param name="x2">直线上的第2个点的水平坐标。</param>
            <param name="y2">直线上的第2个点的垂直坐标。</param>
            <returns>点到直线的距离。</returns>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.DistancePointToSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算点到线段的最短距离。
            </summary>
            <param name="x">目标点的水平坐标。</param>
            <param name="y">目标点的垂直坐标。</param>
            <param name="x1">线段端点1的水平坐标。</param>
            <param name="y1">线段端点1的垂直坐标。</param>
            <param name="x2">线段端点2的水平坐标。</param>
            <param name="y2">线段端点2的垂直坐标。</param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.Angle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两个点之间连线与0度基准线（从点（x1,y1）水平向右画线）之间的夹角角度。
            </summary>
            <param name="x1">第1个点的水平坐标。</param>
            <param name="y1">第1个点的垂直坐标。</param>
            <param name="x2">第2个点的水平坐标。</param>
            <param name="y2">第2个点的垂直坐标。</param>
            <returns>夹角角度。</returns>
            <remarks>返回值可能为负数。即顺时针方向的夹角角度为0到180度，逆时针方向夹角角度值在0到-180度之间。</remarks>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.AbsAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两个点之间连线与0度基准线（从点（x1,y1）水平向右画线）之间的顺时针夹角角度。
            </summary>
            <param name="x1">第1个点的水平坐标。</param>
            <param name="y1">第1个点的垂直坐标。</param>
            <param name="x2">第2个点的水平坐标。</param>
            <param name="y2">第2个点的垂直坐标。</param>
            <returns>夹角角度。</returns>
            <remarks>返回值0到360之间的夹角角度数值。</remarks>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.SegmentMiddlePoint(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            计算线段中点。
            </summary>
            <param name="ptA">线段的端点A。</param>
            <param name="ptB">线段的端点B。</param>
            <returns>线段上的中点坐标。</returns>
        </member>
        <member name="M:Thinksea.Drawing.GraphicsArithmetic.SegmentMiddlePoint(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            计算线段中点。
            </summary>
            <param name="ptA">线段的端点A。</param>
            <param name="ptB">线段的端点B。</param>
            <returns>线段上的中点坐标。</returns>
        </member>
        <member name="T:Thinksea.General">
            <summary>
            封装了通用的基本功能。（不能继承此类）
            </summary>
            <remarks>
            <note>不要尝试从此类继承或对其进行实例化。</note>
            </remarks>
        </member>
        <member name="M:Thinksea.General.Max(System.SByte[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 sbyte 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Byte[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 byte 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Int16[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 short 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.UInt16[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 ushort 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Int32[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 int 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.UInt32[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 uint 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Int64[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 long 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.UInt64[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 ulong 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Decimal[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 decimal 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Single[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 float 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Max(System.Double[])">
            <summary>
            获取数组中的最大数。
            </summary>
            <param name="value">一个 double 数组。</param>
            <returns>找到的最大数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.SByte[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 sbyte 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Byte[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 byte 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Int16[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 short 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.UInt16[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 ushort 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Int32[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 int 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.UInt32[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 uint 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Int64[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 long 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.UInt64[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 ulong 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Decimal[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 decimal 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Single[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 float 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Min(System.Double[])">
            <summary>
            获取数组中的最小数。
            </summary>
            <param name="value">一个 double 数组。</param>
            <returns>找到的最小数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 元素数量为零。</exception>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.SByte[])">
            <summary>
            在指定 sbyte 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 sbyte 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.SByte[],System.Int32,System.Int32)">
            <summary>
            在指定 sbyte 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 sbyte 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Byte[])">
            <summary>
            在指定 byte 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 byte 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            在指定 byte 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 byte 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Char[])">
            <summary>
            在指定 char 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 char 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            在指定 char 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 char 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Int16[])">
            <summary>
            在指定 short 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 short 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            在指定 short 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 short 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.UInt16[])">
            <summary>
            在指定 ushort 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 ushort 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.UInt16[],System.Int32,System.Int32)">
            <summary>
            在指定 ushort 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 ushort 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Int32[])">
            <summary>
            在指定 int 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 int 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Int32[],System.Int32,System.Int32)">
            <summary>
            在指定 int 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 int 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.UInt32[])">
            <summary>
            在指定 uint 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 uint 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            在指定 uint 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 uint 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Int64[])">
            <summary>
            在指定 long 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 long 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Int64[],System.Int32,System.Int32)">
            <summary>
            在指定 long 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 long 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.UInt64[])">
            <summary>
            在指定 ulong 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 ulong 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.UInt64[],System.Int32,System.Int32)">
            <summary>
            在指定 ulong 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 ulong 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Boolean[])">
            <summary>
            在指定 bool 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 bool 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Boolean[],System.Int32,System.Int32)">
            <summary>
            在指定 bool 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 bool 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Decimal[])">
            <summary>
            在指定 decimal 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 decimal 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Decimal[],System.Int32,System.Int32)">
            <summary>
            在指定 decimal 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 decimal 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Single[])">
            <summary>
            在指定 float 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 float 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Single[],System.Int32,System.Int32)">
            <summary>
            在指定 float 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 float 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Double[])">
            <summary>
            在指定 double 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 double 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.Double[],System.Int32,System.Int32)">
            <summary>
            在指定 double 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 double 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.String[])">
            <summary>
            在指定 string 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 string 数组。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value) 返回“apple, orange, grape, pear”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Join(System.String,System.String[],System.Int32,System.Int32)">
            <summary>
            在指定 string 数组的每个元素之间串联指定的分隔符 String，从而产生单个串联的字符串。
            </summary>
            <param name="separator">一个 String。</param>
            <param name="value">一个 string 数组。</param>
            <param name="startIndex">要使用的 value 中的第一个数组元素。</param>
            <param name="count">要使用的 value 的元素数。</param>
            <exception cref="T:System.ArgumentNullException">value 为空引用（Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex 或 count 小于 0。 
            - 或 -
            startIndex 加上 count 大于 value 中的元素数。
            </exception>
            <returns>
            String，由通过 separator 联接的 value 中的字符串组成。
            - 或 -
            如果 count 为零、value 没有元素，则为 Empty。
            </returns>
            <remarks>
            例如，如果 separator 为“,”，并且 value 的元素为“apple”、“orange”、“grape”和“pear”，则 Join(separator, value, 1, 2) 返回“orange, grape”。
            如果 separator 为空引用（Visual Basic 中为 Nothing），则改用空字符串 (Empty)。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.SByte[],System.SByte[])">
            <summary>
            连接两个 sbyte 数组成为一个 sbyte 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Byte[],System.Byte[])">
            <summary>
            连接两个 byte 数组成为一个 byte 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Char[],System.Char[])">
            <summary>
            连接两个 char 数组成为一个 char 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Int16[],System.Int16[])">
            <summary>
            连接两个 short 数组成为一个 short 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.UInt16[],System.UInt16[])">
            <summary>
            连接两个 ushort 数组成为一个 ushort 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Int32[],System.Int32[])">
            <summary>
            连接两个 int 数组成为一个 int 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.UInt32[],System.UInt32[])">
            <summary>
            连接两个 uint 数组成为一个 uint 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Int64[],System.Int64[])">
            <summary>
            连接两个 long 数组成为一个 long 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.UInt64[],System.UInt64[])">
            <summary>
            连接两个 ulong 数组成为一个 ulong 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Boolean[],System.Boolean[])">
            <summary>
            连接两个 bool 数组成为一个 bool 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Decimal[],System.Decimal[])">
            <summary>
            连接两个 decimal 数组成为一个 decimal 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Single[],System.Single[])">
            <summary>
            连接两个 float 数组成为一个 float 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Double[],System.Double[])">
            <summary>
            连接两个 double 数组成为一个 double 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.String[],System.String[])">
            <summary>
            连接两个 string 数组成为一个 string 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.Concat(System.Object[],System.Object[])">
            <summary>
            连接两个 object 数组成为一个 object 数组。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>合并后的数组。</returns>
            <remarks>
            a 或 b 如果为空引用（Visual Basic 中为 Nothing），则改用长度为 0 元素的同类型数组。
            </remarks>
        </member>
        <member name="M:Thinksea.General.ExecuteSQL(System.Data.Common.DbConnection,System.String)">
            <summary>
            批量执行 SQL 代码。（支持 GO 语句）
            </summary>
            <param name="connection">已经打开的数据库联接。</param>
            <param name="sqlString">SQL 代码。</param>
        </member>
        <member name="M:Thinksea.General.FixSQLCommandText(System.String)">
            <summary>
            将指定的字符串按照 SQL 的字符串语法规则进行字符串转义处理。这个被处理的字符串将置于两个单引号之间共同构成符合 SQL 语法的字符串。
            </summary>
            <param name="commandText">需要进行转义处理的字符串。</param>
            <returns>转义后的符合 SQL 语法规则的字符串。</returns>
            <remarks>
            当我们需要执行一条这样的 SQL 语句，其中查询条件[Name]的取值为“abx'de”，如果我们写成 SELECT * FROM [abc] WHERE [Name]='abx'de' 显然是不符合 SQL 语法的，正确的写法应该是 SELECT * FROM [abc] WHERE [Name]='abx''de'，这个方法就是用来处理这种问题的，它会将参数指定的字符串中包含的这些需要作转义处理的内容（类似于单引号“'”等容易导致 SQL 语法错误特殊符号）进行符合 SQL 语法规则的转义处理。
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[System.Console.WriteLine("SELECT * FROM [abc] WHERE [Name]='" + FixSQLCommandText("abx'de") + "'");
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>SELECT * FROM [abc] WHERE [Name]='abx''de'
            </para>
            </example>
        </member>
        <member name="M:Thinksea.General.FixSQLCommandTextLike(System.String)">
            <summary>
            将指定的字符串按照 SQL 的 LIKE 命令语法规则进行字符串转义处理。这个被处理的字符串将作为 LIKE 命令参数。
            </summary>
            <param name="commandText">需要进行转义处理的字符串。</param>
            <returns>转义后的符合 SQL 语法规则的字符串。</returns>
            <remarks>
            当我们需要执行一条这样的 SQL 语句，其中查询条件[Name]的取值为“a%b'x[de”，如果我们写成 SELECT * FROM [abc] WHERE [Name] LIKE 'a%b'x[de' 显然是不符合 SQL 语法的，正确的写法应该是 SELECT * FROM [abc] WHERE [Name] LIKE 'a[%]b''x[[]de'，这个方法就是用来处理这种问题的，它会将参数指定的字符串中包含的这些需要作转义处理的内容（类似于百分号“%”等容易导致 SQL 语法错误特殊符号）进行符合 SQL LIKE 命令语法规则的转义处理。
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[System.Console.WriteLine("SELECT * FROM [abc] WHERE [Name] LIKE '" + FixSQLCommandTextLike("a%b'x[de") + "'");
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>SELECT * FROM [abc] WHERE [Name] LIKE 'a[%]b''x[[]de'
            </para>
            </example>
        </member>
        <member name="M:Thinksea.General.FixSQLFieldName(System.String)">
            <summary>
            将指定的字段名按照 SQL 的字段语法规则进行字符串转义处理。这个被处理的字符串将被用作 SQL 字段名称。
            </summary>
            <param name="fieldName">需要进行转义处理的字段名。</param>
            <returns>转义后的符合 SQL 字段语法规则的字符串。</returns>
            <remarks>
            假设我们需要创建一个命名为“Name]Sex”的 SQL 字段，如果不进行转义处理显然是不符合 SQL 语法的，正确的写法应该是“[Name]]Sex]”，这个方法就是用来处理这种问题的，它会将参数指定的字段名中包含的这些需要作转义处理的内容进行符合 SQL 字段语法规则的转义处理。
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[System.Console.WriteLine("SELECT * FROM [abc] WHERE [" + FixSQLFieldName("Name]Sex") + "]='abcde'");
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>SELECT * FROM [abc] WHERE [Name]]Sex]='abcde'
            </para>
            </example>
        </member>
        <member name="M:Thinksea.General.ConvertToFileSize(System.Int64)">
            <summary>
            将文件大小转换为以合适的单位（“EB”、“PB”、“TB”、“GB”、“MB”、“KB”、“B”）表示形式的文本。
            </summary>
            <param name="size">以字节“B”为单位的文件大小。</param>
            <returns>表示文件大小的带有单位的字符串。</returns>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[System.Console.WriteLine(ConvertToFileSize(11));
            System.Console.WriteLine(ConvertToFileSize(12989));
            System.Console.WriteLine(ConvertToFileSize(1726752));
            System.Console.WriteLine(ConvertToFileSize(1526725236));
            System.Console.WriteLine(ConvertToFileSize(95393296753236));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>11 B
            <br/>12.68 KB
            <br/>1.65 MB
            <br/>1.42 GB
            <br/>86.76 TB
            </para>
            </example>
        </member>
        <member name="M:Thinksea.General.ConvertFileSizeToByte(System.String)">
            <summary>
            将带文件计算机单位（“EB”、“PB”、“TB”、“GB”、“MB”、“KB”、“B”）的文件尺寸描述形式转换为以 B 为单位的基础值。
            </summary>
            <param name="size">表示文件大小的带有单位的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.General.GeneratePassword(System.Int32)">
            <summary>
            生成一个由字母、数字和符号字符组成的密码。
            </summary>
            <param name="passwordLength">生成的密码长度。</param>
            <returns>生成的密码字符串。</returns>
        </member>
        <member name="M:Thinksea.General.GeneratePassword(System.Int32,System.String)">
            <summary>
            生成一个密码，密码内容取决于 PasswordSeed。
            </summary>
            <param name="passwordLength">生成的密码长度。</param>
            <param name="passwordSeed">密码字符种子列表。</param>
            <returns>生成的密码字符串。</returns>
        </member>
        <member name="M:Thinksea.General.GetRelativePath(System.String,System.String)">
            <summary>
            获取路径2相对于路径1的相对路径
            </summary>
            <param name="strPath1">路径1</param>
            <param name="strPath2">路径2</param>
            <returns>返回路径2相对于路径1的路径</returns>
            <example>
            string strPath = GetRelativePath(@"C:\WINDOWS\system32", @"C:\WINDOWS\system\*.*" );
            //strPath == @"..\system\*.*"
            </example>
        </member>
        <member name="M:Thinksea.General.CompareArray(System.Byte[],System.Byte[])">
            <summary>
            比较两个数组中的元素是否相同。
            </summary>
            <param name="a">第一个数组。</param>
            <param name="b">第二个数组。</param>
            <returns>全为 null 返回 true；只有一个为 null 返回 false；元素相同返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Thinksea.General.GetSHA1(System.IO.Stream)">
            <summary>
            计算数据流的 SHA1 值。从指定流的当前位置开始计算。
            </summary>
            <param name="stream">提供数据的流。</param>
            <returns>计算得出的 SHA1 值。</returns>
        </member>
        <member name="M:Thinksea.General.GetSHA1(System.IO.Stream,System.Int64)">
            <summary>
            计算数据流的 SHA1 值。
            </summary>
            <param name="stream">提供数据的流。</param>
            <param name="startPosition">指示从指定的位置开始读取数据计算 SHA1 值。</param>
            <returns>计算得出的 SHA1 值。</returns>
        </member>
        <member name="M:Thinksea.General.GetSHA1(System.String)">
            <summary>
            计算文件的 SHA1 值。
            </summary>
            <param name="filePath">文件。</param>
            <returns>计算得出的文件 SHA1 值。</returns>
        </member>
        <member name="M:Thinksea.General.GetMD5(System.IO.Stream)">
            <summary>
            计算数据流的 MD5 值。从指定流的当前位置开始计算。
            </summary>
            <param name="stream">提供数据的流。</param>
            <returns>计算得出的 MD5 值。</returns>
        </member>
        <member name="M:Thinksea.General.GetMD5(System.IO.Stream,System.Int64)">
            <summary>
            计算数据流的 MD5 值。
            </summary>
            <param name="stream">提供数据的流。</param>
            <param name="startPosition">指示从指定的位置开始读取数据计算 MD5 值。</param>
            <returns>计算得出的 MD5 值。</returns>
        </member>
        <member name="M:Thinksea.General.GetMD5(System.String)">
            <summary>
            计算文件的 MD5 值。
            </summary>
            <param name="filePath">文件。</param>
            <returns>计算得出的文件 MD5 值。</returns>
        </member>
        <member name="M:Thinksea.General.Bytes2HexString(System.Byte[])">
            <summary>
            byte 数组转 16 进制字符串。
            </summary>
            <param name="bytes">一个 byte 数组。</param>
            <returns>16 进制字符串。</returns>
        </member>
        <member name="M:Thinksea.General.HexString2Bytes(System.String)">
            <summary>
            将 16 进制字符串转为 byte 数组。
            </summary>
            <param name="hexStr">16 进制字符串。</param>
            <returns>byte 数组。</returns>
        </member>
        <member name="M:Thinksea.General.#cctor">
            <summary>
            构造方法。
            </summary>
        </member>
        <member name="T:Thinksea.Image">
            <summary>
            封装了图像处理方法。
            </summary>
        </member>
        <member name="F:Thinksea.Image.IndexedPixelFormats">
            <summary>
            会产生graphics异常的PixelFormat（一般提示为“无法从带有索引像素格式的图像创建 Graphics 对象。”）
            </summary>
        </member>
        <member name="M:Thinksea.Image.IsPixelFormatIndexed(System.Drawing.Imaging.PixelFormat)">
            <summary>
            判断图片的PixelFormat 是否在 引发异常的 PixelFormat 之中
            </summary>
            <param name="imgPixelFormat">原图片的PixelFormat</param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Image.GetThumbnailImageSize(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            将指定的图片尺寸计算为不大于指定的缩略图最大尺寸的等比例缩略图尺寸。（返回值不会大于缩略图最大尺寸）
            </summary>
            <param name="width">原图像宽度</param>
            <param name="height">原图像高度</param>
            <param name="thumbnailWidth">缩略图最大宽度。取值为 0 时表示忽略此参数。</param>
            <param name="thumbnailHeight">缩略图最大高度。取值为 0 时表示忽略此参数。</param>
            <param name="lockSmallImage">锁定小尺寸图片。如果此项设置为 true，当原图像尺寸小于缩略图限制尺寸时返回原图像尺寸。</param>
            <returns>缩略图在图片框中的位置和缩略图的尺寸</returns>
        </member>
        <member name="M:Thinksea.Image.GetImageFromFile(System.String)">
            <summary>
            从指定的文件装载图像。
            </summary>
            <param name="fileName">文件全名。</param>
            <returns>一个 System.Drawing.Image 实例。</returns>
            <remarks>
            这个函数用于解决 System.Drawing.Image.FromFile 装载图片后不能及时释放文件的问题。
            </remarks>
        </member>
        <member name="M:Thinksea.Image.GetImageFromStream(System.IO.Stream)">
            <summary>
            从指定的流装载图像。
            </summary>
            <param name="stream">数据流。</param>
            <returns>一个 System.Drawing.Image 实例。</returns>
            <remarks>
            这个函数用于解决 System.Drawing.Image.FromFile 装载图片后不能及时释放文件的问题。
            </remarks>
        </member>
        <member name="M:Thinksea.Image.GetThumbnailImage(System.Drawing.Image,System.Int32,System.Int32,System.Boolean,System.Boolean,Thinksea.eImageQuality,System.Boolean,System.Drawing.Color)">
            <summary>
            获取指定图像的等比例缩略图。
            </summary>
            <param name="image">用于提供图像数据的 System.Drawing.Image 实例。</param>
            <param name="width">缩略图宽度。取值为 0 时表示忽略此参数。</param>
            <param name="height">缩略图高度。取值为 0 时表示忽略此参数。</param>
            <param name="proportion">缩放时维持等比例。</param>
            <param name="lockSmallImage">锁定小尺寸图片。如果此项设置为 true，当原图像尺寸小于缩略图限制尺寸时返回原图像尺寸。</param>
            <param name="imageQuality">输出图片质量。</param>
            <param name="keepWhite">指示是否保留空白边距。如果保留空白边距则使用指定的颜色填充，以确保输出的图像的尺寸与指定的尺寸相等。否则输出的图像的尺寸可能小于指定的尺寸。</param>
            <param name="whiteFillColor">空白区域填充颜色。</param>
            <returns>一个 System.Drawing.Image 实例。</returns>
        </member>
        <member name="M:Thinksea.Image.GetThumbnailImage(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,Thinksea.eImageQuality,System.Boolean,System.Drawing.Color)">
            <summary>
            获取指定文件的等比例缩略图。
            </summary>
            <param name="fileName">图片文件全名。</param>
            <param name="width">缩略图宽度。取值为 0 时表示忽略此参数。</param>
            <param name="height">缩略图高度。取值为 0 时表示忽略此参数。</param>
            <param name="proportion">缩放时维持等比例。</param>
            <param name="lockSmallImage">锁定小尺寸图片。如果此项设置为 true，当原图像尺寸小于缩略图限制尺寸时返回原图像尺寸。</param>
            <param name="imageQuality">输出图片质量。</param>
            <param name="keepWhite">指示是否保留空白边距。如果保留空白边距则使用指定的颜色填充，以确保输出的图像的尺寸与指定的尺寸相等。否则输出的图像的尺寸可能小于指定的尺寸。</param>
            <param name="whiteFillColor">空白区域填充颜色。</param>
            <returns>一个 System.Drawing.Image 实例。</returns>
        </member>
        <member name="M:Thinksea.Image.GetImageSize(System.IO.Stream)">
            <summary>
            获取图片尺寸。
            </summary>
            <param name="input">图片数据输入流。</param>
            <returns>图片尺寸。</returns>
        </member>
        <member name="M:Thinksea.Image.GetImageSize(System.String)">
            <summary>
            获取图片尺寸。
            </summary>
            <param name="fileName">图片文件名。</param>
            <returns>图片尺寸。</returns>
        </member>
        <member name="T:Thinksea.eImageQuality">
            <summary>
            定义图片质量。
            </summary>
        </member>
        <member name="F:Thinksea.eImageQuality.High">
            <summary>
            高质量。
            </summary>
        </member>
        <member name="F:Thinksea.eImageQuality.Low">
            <summary>
            低质量。
            </summary>
        </member>
        <member name="F:Thinksea.eImageQuality.Web">
            <summary>
            Web 质量。
            </summary>
        </member>
        <member name="T:Thinksea.Logs.LogOutputType">
            <summary>
            日志输出位置。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.None">
            <summary>
            指示不输出日志。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.Debugger">
            <summary>
            将日志输出到调试程序。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.Console">
            <summary>
            将日志输出到控制台。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.LogFile">
            <summary>
            将日志输出到日志文件。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.LogEvent">
            <summary>
            将日志输出到日志事件。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.NotDebugger">
            <summary>
            将日志输出到可以输出的任何地方（调试程序除外）。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputType.All">
            <summary>
            将日志输出到可以输出的任何地方。
            </summary>
        </member>
        <member name="T:Thinksea.Logs.LogFormatType">
            <summary>
            日志类型。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogFormatType.Text">
            <summary>
            具有纯文本格式的日志。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogFormatType.XML">
            <summary>
            具有 XML 格式的日志，此设置要求开发人员书写日志内容时自己实现 XML 规则。
            </summary>
        </member>
        <member name="T:Thinksea.Logs.LogLevelType">
            <summary>
            定义日志级别类型。
            </summary>
            <remarks>
            修改此类型定义时必须同步修改 <see cref="T:Thinksea.Logs.LogOutputLevel"/> 类型（详见其相关说明）。
            </remarks>
        </member>
        <member name="F:Thinksea.Logs.LogLevelType.Debug">
            <summary>
            调试信息。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogLevelType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogLevelType.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogLevelType.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogLevelType.Fatal">
            <summary>
            致命错误。
            </summary>
        </member>
        <member name="T:Thinksea.Logs.LogOutputLevel">
            <summary>
            定义输出哪些日志。
            </summary>
            <remarks>
            此类型定义必须完整包含类型 <see cref="T:Thinksea.Logs.LogLevelType"/> 的全部值。
            </remarks>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.None">
            <summary>
            指示不输出日志。(此值必须单独出现，不可与其他值搭配使用。)
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.Debug">
            <summary>
            调试信息。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.Fatal">
            <summary>
            致命错误。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.LogOutputLevel.All">
            <summary>
            任何日志信息都会被输出。(此值必须单独出现，不可与其他值搭配使用。)
            </summary>
        </member>
        <member name="T:Thinksea.Logs.LogEntity">
            <summary>
            定义一个日志实体信息类。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.DateTime">
            <summary>
            获取或设置日志时间。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.Message">
            <summary>
            获取或设置日志内容。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.Level">
            <summary>
            获取或设置日志级别。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.UserID">
            <summary>
            获取或设置引发此事件的用户 ID。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.EventID">
            <summary>
            获取或设置错误号/事件 ID。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.EventSourceName">
            <summary>
            获取或设置事件来源。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.LogEntity.TaskCategory">
            <summary>
            获取或设置导致事件的任务类别。
            </summary>
        </member>
        <member name="T:Thinksea.Logs.Log">
            <summary>
            封装了一个轻量级的日志功能。
            </summary>
            <remarks>
            注意：日志文件虽然以日期命名，但是并不能精确保证记录写入时间与日志文件名所表示的日期相同。
            原因主要有两点：
            1、日志文件打开时间与写入时间有一定的微差，例如：位于零点的日期交割时间，此时日志文件打开时间位于零点之前，而日志写入时间却可能位于零点之后。
            2、如果日志时间由用户指定，则无法保证与文件名所表示的日期相同。
            </remarks>
        </member>
        <member name="F:Thinksea.Logs.Log.XMLDocBeginTag">
            <summary>
            获取 XML 格式日志的开始标记。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Thinksea.Logs.Log.XMLDocEndTag">
            <summary>
            获取 XML 格式日志的结束标记。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Thinksea.Logs.Log.LogPath">
            <summary>
            获取或设置日志文件存盘目录。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.MaxLogFileSize">
            <summary>
            获取或设置单个日志文件最大尺寸。(单位：KB)
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.OutputType">
            <summary>
            获取或设置日志输出位置。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.OutputLevel">
            <summary>
            获取或设置一个标识，指示输出哪些级别的日志。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.Log.wqLog">
            <summary>
            将日志写入到线程的工作队列。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.Log.thWriter">
            <summary>
            用于将日志信息写入到输出设备的线程。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.LogFormat">
            <summary>
            获取或设置日志格式。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="F:Thinksea.Logs.Log.LockThis">
            <summary>
            同步写入日志的锁功能实现。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.Log2String(Thinksea.Logs.LogEntity,Thinksea.Logs.LogFormatType)">
            <summary>
            获取指定日志的具有指定格式的数据。
            </summary>
            <param name="log">日志对象。</param>
            <param name="logFormat">日志格式。</param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Logs.Log.WriteLog(Thinksea.Logs.LogEntity)">
            <summary>
            输出一条日志信息。
            </summary>
            <param name="log">日志实体。</param>
        </member>
        <member name="F:Thinksea.Logs.Log._IsBusy">
            <summary>
            用于描述异步输出日志线程当前是否正在输出日志。（注意：此对象只对异步输出日志操作有效）
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.IsBusy">
            <summary>
            获取一个值，用于描述异步输出日志线程当前是否正在输出日志。（注意：此对象只对异步输出日志操作有效）
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.WriteMethod">
            <summary>
            输出日志的线程方法。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.GetCurrentLogFile">
            <summary>
            获取当前可用的日志文件。
            </summary>
            <returns>日志文件名。</returns>
        </member>
        <member name="M:Thinksea.Logs.Log.Write(System.String)">
            <summary>
            输出一条日志信息（该信息将包含一个自动生成的时间元素。如果日志格式设置为“LogFormatType.XML”，则先转为 XML 格式，为日志信息增加“Message”标签对。）
            </summary>
            <param name="log">日志信息。</param>
        </member>
        <member name="M:Thinksea.Logs.Log.Write(Thinksea.Logs.LogLevelType,System.String)">
            <summary>
            输出一条日志信息（该信息将包含一个自动生成的时间元素。如果日志格式设置为“LogFormatType.XML”，则先转为 XML 格式，为日志信息增加“Message”标签对。）
            </summary>
            <param name="level">日志级别。</param>
            <param name="log">日志信息。</param>
        </member>
        <member name="M:Thinksea.Logs.Log.Write(Thinksea.Logs.LogEntity)">
            <summary>
            输出一条日志信息（该信息将包含一个自动生成的时间元素。如果日志格式设置为“LogFormatType.XML”，则先转为 XML 格式，为日志信息增加“Message”标签对。）
            </summary>
            <param name="log">日志信息。</param>
        </member>
        <member name="M:Thinksea.Logs.Log.WriteBaseString(System.String)">
            <summary>
            输出一条日志信息（数据保持原样直接写入日志设备）。
            </summary>
            <param name="s">日志信息。</param>
        </member>
        <member name="M:Thinksea.Logs.Log.WriteXML(System.String)">
            <summary>
            输出一条具有 XML 格式的日志信息。
            </summary>
            <param name="xml">符合 XML 规则的文本形式数据。</param>
        </member>
        <member name="M:Thinksea.Logs.Log.WriteXML(System.Xml.XmlNode)">
            <summary>
            输出一条具有 XML 格式的日志信息。
            </summary>
            <param name="xmlNode">XML 格式数据对象。</param>
        </member>
        <member name="F:Thinksea.Logs.Log._AsyncWrite">
            <summary>
            描述是否应该异步写入日志。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.AsyncWrite">
            <summary>
            获取或设置一个值，用于描述是否应该异步输出日志。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.StartAsync">
            <summary>
            启动异步写入日志功能。
            </summary>
            <remarks>
            启动异步写入日志功能后，在写入日志时不会阻塞主线程，这能够提高执行效率，但是此方法不适合需要将日志立即写入的情况（例如：在进程退出前的日志书写操作）。
            </remarks>
        </member>
        <member name="M:Thinksea.Logs.Log.StopAsync">
            <summary>
            禁止异步写入日志功能。调用此方法后将启用同步写入日志功能（这也是日志操作的默认状态）。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.Flush">
            <summary>
            立即将所有待输出的日志数据输出到相应的输出设备（具体的输出位置由属性“<see cref="P:Thinksea.Logs.Log.OutputType"/>”决定）。
            </summary>
        </member>
        <member name="T:Thinksea.Logs.Log.OutLogEventHandler">
            <summary>
            输出日志事件代理。
            </summary>
            <param name="log"></param>
        </member>
        <member name="E:Thinksea.Logs.Log.OutLogEvent">
            <summary>
            当需要输出日志时引发此事件。
            </summary>
        </member>
        <member name="P:Thinksea.Logs.Log.xDoc">
            <summary>
            一个 XML 对象，用于处理 XML 数据。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.GetXMLAttributeString(System.String,System.String)">
            <summary>
            获取指定字符串的 XML 属性编码格式。
            </summary>
            <param name="name">属性名称。</param>
            <param name="value">属性取值。</param>
            <returns>符合 XML 规则的文本形式数据。</returns>
        </member>
        <member name="M:Thinksea.Logs.Log.GetXMLElementString(System.String,System.String)">
            <summary>
            获取指定字符串的 XML 元素编码格式。
            </summary>
            <param name="name">元素名称。</param>
            <param name="text">元素取值。</param>
            <returns>符合 XML 规则的文本形式数据。</returns>
        </member>
        <member name="P:Thinksea.Logs.Log.GlobalLog">
            <summary>
            获取一个全局的日志对象。
            </summary>
        </member>
        <member name="M:Thinksea.Logs.Log.#cctor">
            <summary>
            一个静态构造方法。
            </summary>
        </member>
        <member name="T:Thinksea.Net.DataTransfer">
            <summary>
            封装了数据传输方法。
            </summary>
        </member>
        <member name="T:Thinksea.Net.DataTransfer.TransferPositionChangedEventArgs">
            <summary>
            数据传输尺寸已更改事件参数。
            </summary>
        </member>
        <member name="P:Thinksea.Net.DataTransfer.TransferPositionChangedEventArgs.TransferPosition">
            <summary>
            获取下次传输数据位置。
            </summary>
        </member>
        <member name="P:Thinksea.Net.DataTransfer.TransferPositionChangedEventArgs.AbortTransfer">
            <summary>
            获取或设置一个值，用于指示是否应该终止发送数据任务。
            </summary>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.TransferPositionChangedEventArgs.#ctor(System.Int64)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="transferSize">已传输数据大小。</param>
        </member>
        <member name="T:Thinksea.Net.DataTransfer.TransferPositionChangedHandler">
            <summary>
            当已传输的数据大小更改后引发此事件。
            </summary>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.WriteDataToNetwork(System.Net.Sockets.NetworkStream,System.IO.Stream,System.TimeSpan,System.Int32,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            以指定的发送规则发送数据到指定的网络流，数据来自输入流“inputStream”。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="inputStream">数据输入流。</param>
            <param name="sleep">发送数据间隔时间。</param>
            <param name="dataSize">每次发送数据包大小。</param>
            <param name="firstDataSize">首次发送数据包大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>实际发送的数据大小。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.WriteDataToNetwork(System.Net.Sockets.NetworkStream,System.IO.Stream,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            发送数据到指定的网络流，数据来自输入流“inputStream”。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="inputStream">数据输入流。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>实际发送的数据大小。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.WriteFileToNetwork(System.Net.Sockets.NetworkStream,System.String,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            发送文件到指定的网络流。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="fileName">文件名。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>实际发送的数据大小。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.ReadDataFromNetwork(System.Net.Sockets.NetworkStream,System.Int64,System.IO.Stream,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            从指定的网络流中获取数据并写入到输出流中。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="dataSize">指定要读取的数据最大大小。</param>
            <param name="outputStream">数据输出流。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>实际接收到的数据大小。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.ReadFileFromNetwork(System.Net.Sockets.NetworkStream,System.Int64,System.String,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            以指定的文件名保存文件。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="dataSize">指定要读取的数据大小。</param>
            <param name="fileName">存盘文件名。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>实际接收到的数据大小。</returns>
        </member>
        <member name="T:Thinksea.Net.DataTransfer.BreakPoint">
            <summary>
            定义断点传输数据记录描述信息。
            </summary>
        </member>
        <member name="P:Thinksea.Net.DataTransfer.BreakPoint.Version">
            <summary>
            序列化数据版本号。用于解决版本兼容性问题。
            </summary>
        </member>
        <member name="P:Thinksea.Net.DataTransfer.BreakPoint.LastTransferPosition">
            <summary>
            最后传输数据位置。
            </summary>
        </member>
        <member name="P:Thinksea.Net.DataTransfer.BreakPoint.TotalSize">
            <summary>
            总数据大小。
            </summary>
        </member>
        <member name="P:Thinksea.Net.DataTransfer.BreakPoint.SHA1">
            <summary>
            数据的 SHA1 码。
            </summary>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.BreakPoint.ToBytes">
            <summary>
            获取此实例中的数据转为 byte 数组。
            </summary>
            <returns>此实例的 byte 数组形式。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.BreakPoint.FromBytes(System.Byte[])">
            <summary>
            从 byte 数组还原数据到此实例。
            </summary>
            <param name="datas">从其中还原数据的数据区。</param>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.WriteDataToNetworkBreakPoint(System.Net.Sockets.NetworkStream,System.IO.Stream,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            发送数据到指定的网络流，数据来自输入流“inputStream”。支持断点续传。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="inputStream">数据输入流。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>指示数据传输是否成功。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.WriteFileToNetworkBreakPoint(System.Net.Sockets.NetworkStream,System.String,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            发送文件到指定的网络流。支持断点续传。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="fileName">文件名。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>指示数据传输是否成功。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.SaveBreakPoint(System.IO.Stream,Thinksea.Net.DataTransfer.BreakPoint)">
            <summary>
            保存断点数据到输出流。
            </summary>
            <param name="outputStream"></param>
            <param name="breakPoint"></param>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.LoadBreakPoint(System.IO.Stream)">
            <summary>
            读取断点报文从数据流。
            </summary>
            <param name="outputStream"></param>
            <returns>无法加载断点报文则返回 null。</returns>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.ReadDataFromNetworkBreakPoint(System.Net.Sockets.NetworkStream,System.IO.Stream,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            从指定的网络流中获取数据并写入到输出流中。支持断点续传。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="outputStream">数据输出流。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>指示数据传输是否成功。</returns>
            <remarks>
            断点续传的前提条件为数据输出流参数 <paramref name="outputStream"/> 提供读写支持。
            </remarks>
        </member>
        <member name="M:Thinksea.Net.DataTransfer.ReadFileFromNetworkBreakPoint(System.Net.Sockets.NetworkStream,System.String,System.Int32,Thinksea.Net.DataTransfer.TransferPositionChangedHandler)">
            <summary>
            以指定的文件名保存文件。支持断点续传。
            </summary>
            <param name="networkStream">与客户端连接的网络流。</param>
            <param name="fileName">存盘文件名。</param>
            <param name="bufferSize">设置允许使用的缓冲区最大大小。</param>
            <param name="transferSizeChanged">已经传输的数据大小更改时引发此事件。设置为 null 则忽略此参数。</param>
            <returns>指示数据传输是否成功。</returns>
        </member>
        <member name="T:Thinksea.Net.TcpClientPool">
            <summary>
            TCP 客户端链接池。用于提供 TcpClient 多连接解决方案。
            注意：对跨线程是安全的。
            </summary>
        </member>
        <member name="T:Thinksea.Net.TcpClientPool.TcpClientPoolEntity">
            <summary>
            描述一个客户端连接信息。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpClientPool.TcpClientPoolEntity.ServerIP">
            <summary>
            服务器 IP。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpClientPool.TcpClientPoolEntity.ServerPort">
            <summary>
            服务器通信端口。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpClientPool.TcpClientPoolEntity.NetworkStream">
            <summary>
            一个可用的数据通道。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpClientPool.TcpClientPoolEntity.TcpClient">
            <summary>
            一个 TCP 客户端连接。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpClientPool.TcpClientPoolEntity.IsFree">
            <summary>
            获取一个值，指示是否空闲。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.TcpClientPoolEntity.Close">
            <summary>
            关闭连接和流，并释放此对象占用的所有资源。
            </summary>
        </member>
        <member name="F:Thinksea.Net.TcpClientPool.TcpClients">
            <summary>
            已经建立的客户端连接集合。
            </summary>
        </member>
        <member name="F:Thinksea.Net.TcpClientPool._TcpClientsLock">
            <summary>
            TcpClient 集合操作锁。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpClientPool.Count">
            <summary>
            获取已经分配的 Tcp 连接池中的链接对象数量。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.#ctor">
            <summary>
            用指定的数据初始化此实例。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.GetConnection(System.Net.IPAddress,System.Int32)">
            <summary>
            获取一个可用的数据通道。（重要的：应该在不使用数据通道后调用“<see cref="M:Thinksea.Net.TcpClientPool.Free(System.Net.Sockets.NetworkStream)"/>”方法将其归还给连接池或调用“<see cref="M:Thinksea.Net.TcpClientPool.Close(System.Net.Sockets.NetworkStream)"/>”方法关闭对象并释放其占用的资源。）
            </summary>
            <param name="serverIP">服务器 IP。</param>
            <param name="serverPort">服务器通信端口。</param>
            <returns>一个可用的数据通道。</returns>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.Free(System.Net.Sockets.NetworkStream)">
            <summary>
            将 TCP 连接还给连接池，使其可以被其他调用者重用。
            </summary>
            <param name="ns">一个数据通道。</param>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.Close(System.Net.Sockets.NetworkStream)">
            <summary>
            关闭指定的流、连接并释放与之关联的所有资源。
            </summary>
            <param name="ns">一个数据通道。</param>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.IsConnected(System.Net.Sockets.NetworkStream)">
            <summary>
            获取一个值，指示是否已连接到远程主机。
            </summary>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.CloseAll">
            <summary>
            关闭连接池中的所有链接，并释放占用的全部资源。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpClientPool.Dispose">
            <summary>
            释放此对象占用的全部资源。
            </summary>
        </member>
        <member name="T:Thinksea.Net.TcpServerPool">
            <summary>
            TCP 服务器端。用于提供 TcpClient 多连接解决方案。
            注意：对跨线程是安全的。
            </summary>
        </member>
        <member name="T:Thinksea.Net.TcpServerPool.TcpServerPoolEntity">
            <summary>
            描述一个客户端连接信息。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpServerPool.TcpServerPoolEntity.NetworkStream">
            <summary>
            一个可用的数据通道。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpServerPool.TcpServerPoolEntity.TcpClient">
            <summary>
            一个 TCP 客户端连接。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.TcpServerPoolEntity.Close">
            <summary>
            关闭连接和流，并释放此对象占用的所有资源。
            </summary>
        </member>
        <member name="T:Thinksea.Net.TcpServerPool.TcpClientConnectionEventHandler">
            <summary>
            当与客户端建立连接时引发此事件代理。
            </summary>
            <param name="client">客户端连接信息。</param>
            <param name="networkStream">网络数据通道。</param>
        </member>
        <member name="F:Thinksea.Net.TcpServerPool.tcpListener">
            <summary>
            侦听服务。
            </summary>
        </member>
        <member name="F:Thinksea.Net.TcpServerPool.TcpClients">
            <summary>
            已经建立的客户端连接集合。
            </summary>
        </member>
        <member name="F:Thinksea.Net.TcpServerPool.TcpClientsLock">
            <summary>
            客户端连接集合锁。
            </summary>
        </member>
        <member name="P:Thinksea.Net.TcpServerPool.Count">
            <summary>
            获取已经建立的连接数。
            </summary>
        </member>
        <member name="E:Thinksea.Net.TcpServerPool.TcpClientConnectionEvent">
            <summary>
            当与客户端建立连接时引发此事件。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="listenIP">侦听服务 IP 地址。</param>
            <param name="listenPort">侦听服务端口。</param>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.Start">
            <summary>
            启动服务。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.Start(System.Int32)">
            <summary>
            启动服务。
            </summary>
            <param name="backlog">挂起连接队列的最大长度。</param>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.Stop">
            <summary>
            停止服务。
            </summary>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.ClientConnection(System.IAsyncResult)">
            <summary>
            侦听服务方法。
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Thinksea.Net.TcpServerPool.Dispose">
            <summary>
            释放此对象占用的全部资源。
            </summary>
        </member>
        <member name="T:Thinksea.NotFoundException">
            <summary>
            指定记录未发现时引发的异常。
            </summary>
        </member>
        <member name="M:Thinksea.NotFoundException.#ctor">
            <summary>
            初始化NotFoundException类的新实例。
            </summary>
        </member>
        <member name="M:Thinksea.NotFoundException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化NotFoundException类的新实例。
            </summary>
            <param name="message">异常错误信息</param>
        </member>
        <member name="M:Thinksea.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对导致此异常的内部异常的引用来初始化NotFoundException类的新实例。
            </summary>
            <param name="message">异常错误信息</param>
            <param name="inner">作为当前异常的原因的异常。</param>
        </member>
        <member name="T:Thinksea.RepeatException">
            <summary>
            指定记录已经存在时引发的异常。
            </summary>
        </member>
        <member name="M:Thinksea.RepeatException.#ctor">
            <summary>
            初始化RepeatException类的新实例。
            </summary>
        </member>
        <member name="M:Thinksea.RepeatException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化RepeatException类的新实例。
            </summary>
            <param name="message">异常错误信息</param>
        </member>
        <member name="M:Thinksea.RepeatException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对导致此异常的内部异常的引用来初始化RepeatExceptionbv类的新实例。
            </summary>
            <param name="message">异常错误信息</param>
            <param name="inner">作为当前异常的原因的异常。</param>
        </member>
        <member name="T:Thinksea.Text.Chinese">
            <summary>
            封装了中文处理的基础功能。
            </summary>
        </member>
        <member name="M:Thinksea.Text.Chinese.Substring(System.String,System.Int32)">
            <summary>
            截取指定字符串的子串。（注意：一个汉字视为两个英文字符）
            </summary>
            <param name="input">输入字符串。</param>
            <param name="maxLength">最大长度。</param>
            <returns>截取后的子字符串。</returns>
            <remarks>
            从字符串的首字符开始，最多截取 maxLength 个字符。如果截取结果包含半个汉字，为了保持数据完整性同时兼顾最大长度限制，则自动获取 maxLength-1 个字符。
            例如：从字符串“abc欢迎您”截取前6个字符，则返回结果为“abc欢”
            <note>
            注意：一个汉字视为两个英文字符。
            </note>
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[System.Console.WriteLine(Substring("欢迎您abc", 7));
            System.Console.WriteLine(Substring("abc欢迎您", 6));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>欢迎您a
            <br/>abc欢
            </para>
            </example>
        </member>
        <member name="T:Thinksea.Text.Chinese2Spell">
            <summary>
            封装了将汉字转换为拼音的功能,包括功能全拼和缩写
            </summary>
        </member>
        <member name="F:Thinksea.Text.Chinese2Spell.pyValue">
            <summary>
            汉字的机内码数组
            </summary>
        </member>
        <member name="F:Thinksea.Text.Chinese2Spell.pyName">
            <summary>
            机内码对应的拼音数组
            </summary>
        </member>
        <member name="M:Thinksea.Text.Chinese2Spell.GetFullSpell(System.String,System.String)">
            <summary>
            获取汉字字符串转拼音(全拼)。
            </summary>
            <param name="hzString">汉字字符串</param>
            <param name="splitChar">分隔符。</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="M:Thinksea.Text.Chinese2Spell.GetSpell(System.String,System.Boolean)">
            <summary>
            获取汉字字符串转拼音（缩写）。
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <param name="lower">指示小写或者大写。</param>
            <returns>拼音缩写</returns>
        </member>
        <member name="M:Thinksea.Text.Chinese2Spell.GetSpell(System.String,System.Boolean,System.String)">
            <summary>
            获取汉字字符串转拼音（缩写）。
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <param name="lower">指示小写或者大写。</param>
            <param name="splitChar">分隔符。</param>
            <returns>拼音缩写</returns>
        </member>
        <member name="M:Thinksea.Text.Chinese2Spell.GetSpell(System.Char,System.Boolean)">
            <summary>
            获取单个汉字的拼音声母。
            </summary>
            <param name="ch">要转换的单个汉字</param>
            <param name="lower">指示小写或者大写。</param>
            <returns>拼音声母</returns>
        </member>
        <member name="T:Thinksea.Web">
            <summary>
            网站编程基本处理类。封装了网站编程过程中常用的基本功能。（不能继承此类）
            </summary>
            <remarks>
            <note>不要尝试从此类继承或对其进行实例化。</note>
            </remarks>
        </member>
        <member name="M:Thinksea.Web.RemoveScriptLable(System.String)">
            <summary>
            从指定的 HTML 文本中清除脚本标签“SCRIPT”。
            </summary>
            <param name="html">具有 HTML 格式的代码文本。</param>
            <returns>清除“SCRIPT”标签后的返回值。</returns>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(RemoveScriptLable(@"
            <script language=javascript>
            alert('ok');
            </script>
            abc"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>abc
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.RemoveHtmlLable(System.String)">
            <summary>
            从指定的 HTML 文本中清除 HTML 标签和脚本标签“SCRIPT”等不可显示代码，只保留可显示文本。
            </summary>
            <param name="html">具有 HTML 格式的代码文本。</param>
            <returns>清除不可显示代码后的返回值。</returns>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(RemoveHtmlLable(@"
            <table id=Table1 align=center border=0>
            <tr><TD>用户名</TD></tr>
            <TR><TD>密&nbsp;码</TD></TR>
            <TR><TD>验证码</TD></TR>
            </table>"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>用户名密 码验证码
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.HtmlSubstring(System.String,System.Int32)">
            <summary>
            <![CDATA[
            从 HTML 格式文本中截取子字符串。截取前先清除 HTML 标签和脚本标签“SCRIPT”等不可显示代码，同时清除可以解释为空白字符的代码（如：HTML代码中的空格标记“&nbsp;”），只保留可显示文本。
            ]]>
            </summary>
            <param name="input">输入具有 HTML 格式的代码文本。</param>
            <param name="maxLength">截取的文本最大长度。</param>
            <returns>截取后的子字符串（不包含不可见代码元素）</returns>
            <remarks>
            <![CDATA[
            截取前先清除 HTML 标签和脚本标签“SCRIPT”等不可显示代码，同时清除可以解释为空白字符的代码（如：HTML代码中的空格标记“&nbsp;”），只保留可显示文本。
            ]]>
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(RemoveHtmlLable(@"
            <table id=Table1 align=center border=0>
            <tr><TD>用户名</TD></tr>
            <TR><TD>密&nbsp;码</TD></TR>
            <TR><TD>验证码</TD></TR>
            </table>", 8));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>用户名密
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.TextToHtml(System.String)">
            <summary>
            将纯文本转换成具有相似格式编排的 HTML 代码文本。
            </summary>
            <param name="text">一个 string 对象。可能具有格式编排的文本。</param>
            <returns>具有 HTML 格式的文本对象。</returns>
            <remarks>
            为了保证转换后的内容尽可能保持之前的文本编排格式，将换行符和空格符号等内容进行相应的转换。
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[string str = @"
            欢迎使用 Thinksea 产品：
                更多的内容请从 http://www.thinksea.com/ 站点获取。
            ";
            this.Response.Write(Thinksea.Web.TextToHtml(str));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Thinksea.Web.HtmlToText(System.String)">
            <summary>
            将 HTML 代码片段转换成具有相似格式编排的纯文本形式。
            </summary>
            <param name="html">一段 HTML 片段。</param>
            <returns>具有 HTML 格式的文本对象。</returns>
            <remarks>
            <![CDATA[为了保证转换后的内容尽可能保持之前的文本编排格式，将换行“<br />”和空格符号“&nbsp;”等内容进行相应的转换。]]>
            </remarks>
            <example>
            <para lang="C#">
            下面的代码演示了如何使用这个方法：
            </para>
            <code lang="C#">
            <![CDATA[string str = @"
            欢迎使用 Thinksea 产品：<br />
            &nbsp;&nbsp;&nbsp;&nbsp;更多的内容请从 http://www.thinksea.com/ 站点获取。
            ";
            this.Response.Write(Thinksea.Web.HtmlToText(str));
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Thinksea.Web.UriExtTool">
            <summary>
            封装了 URI 扩展处理功能。
            </summary>
        </member>
        <member name="T:Thinksea.Web.UriExtTool.QueryItem">
            <summary>
            定义 URI 的基础参数数据结构。
            </summary>
        </member>
        <member name="F:Thinksea.Web.UriExtTool.QueryItem.Key">
            <summary>
            参数名。
            </summary>
        </member>
        <member name="F:Thinksea.Web.UriExtTool.QueryItem.Value">
            <summary>
            参数值。
            </summary>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.QueryItem.#ctor">
            <summary>
            一个构造方法。
            </summary>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.QueryItem.#ctor(System.String,System.String)">
            <summary>
            用指定的数据初始化此实例。
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.QueryItem.ToString">
            <summary>
            返回此实例的字符串表示形式。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Thinksea.Web.UriExtTool.path">
            <summary>
            URI 基本路径信息。
            </summary>
        </member>
        <member name="F:Thinksea.Web.UriExtTool.query">
            <summary>
            URI 的参数。
            </summary>
        </member>
        <member name="F:Thinksea.Web.UriExtTool.mark">
            <summary>
            URI 的页面内部定位标记
            </summary>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.Create(System.String)">
            <summary>
            用指定的 URI 创建此实例。
            </summary>
            <param name="uri">一个可能包含参数的 uri 字符串。</param>
            <returns>URI 解析实例。</returns>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.ToString">
            <summary>
            返回此实例的字符串表示形式。
            </summary>
            <returns>返回一个 URI，此实例到字符串表示形式。</returns>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.GetUriParameter(System.String)">
            <summary>
            从指定的 URI 中获取指定的参数的值。
            </summary>
            <param name="name">参数名。</param>
            <returns>指定参数的值，如果找不到这个参数则返回 null。</returns>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.SetUriParameter(System.String,System.String)">
            <summary>
            为指定的 URI 设置参数。
            </summary>
            <param name="name">参数名。</param>
            <param name="value">新的参数值。</param>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.RemoveUriParameter(System.String)">
            <summary>
            从指定的 URI 删除参数。
            </summary>
            <param name="name">参数名。</param>
        </member>
        <member name="M:Thinksea.Web.UriExtTool.ClearUriParameter(System.Boolean)">
            <summary>
            从指定的 URI 删除所有参数，只保留问号“?”之前的部分或者按照参数选择是否保留页面内部定位标记。
            </summary>
            <param name="retainSharp">指示是否应保留页面内部定位标记（井号后的内容）。</param>
            <returns>已经去除参数的 uri 字符串。</returns>
        </member>
        <member name="M:Thinksea.Web.GetUriParameter(System.String,System.String)">
            <summary>
            从指定的 URI 中获取指定的参数的值。
            </summary>
            <param name="uri">一个可能包含参数的 uri 字符串。</param>
            <param name="name">参数名。</param>
            <returns>指定参数的值，如果找不到这个参数则返回 null。</returns>
            <example>
            <para lang="C#">
            <![CDATA[
            下面的代码演示了如何使用这个方法从 URL“http://www.thinksea.com/default.aspx?id=1&name=thinksea#mark1”中获取参数“id”的值“1”：
            ]]>
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write("Par:" + Thinksea.Web.GetUriParameter("http://www.thinksea.com/default.aspx?id=1&name=thinksea#mark1", "id"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>Par:1
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.SetUriParameter(System.String,System.String,System.String)">
            <summary>
            为指定的 URI 设置参数。
            </summary>
            <param name="uri">一个可能包含参数的 uri 字符串。</param>
            <param name="name">参数名。</param>
            <param name="value">新的参数值。</param>
            <returns>已经设置了指定参数名和参数值的 uri 字符串。</returns>
            <remarks>
            如果指定的参数存在，则更改参数值为指定的新的参数值，否则，添加一个具有指定参数名和新的参数值的参数。
            </remarks>
            <example>
            <para lang="C#">
            <![CDATA[
            下面的代码演示了如何使用这个方法将 URL“http://www.thinksea.com/default.aspx?id=1&name=thinksea”的参数“id=1”更改为“id=2”：
            ]]>
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(Thinksea.Web.SetUriParameter("http://www.thinksea.com/default.aspx?id=1&name=thinksea", "id", "2"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/><![CDATA[http://www.thinksea.com/default.aspx?id=2&name=thinksea]]>
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.RemoveUriParameter(System.String,System.String)">
            <summary>
            从指定的 URI 删除参数。
            </summary>
            <param name="uri">一个可能包含参数的 uri 字符串。</param>
            <param name="name">参数名。</param>
            <returns>已经移除了指定参数的 uri 字符串。</returns>
            <example>
            <para lang="C#">
            <![CDATA[
            下面的代码演示了如何使用这个方法清除 URL“http://www.thinksea.com/default.aspx?id=1&name=thinksea”的参数“id=1”：
            ]]>
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(Thinksea.Web.RemoveUriParameter("http://www.thinksea.com/default.aspx?id=1&name=thinksea", "id"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>http://www.thinksea.com/default.aspx?name=thinksea
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.ClearUriParameter(System.String,System.Boolean)">
            <summary>
            从指定的 URI 删除所有参数，只保留问号“?”之前的部分或者按照参数选择是否保留页面内部定位标记。
            </summary>
            <param name="uri">一个可能包含参数的 uri 字符串。</param>
            <param name="retainSharp">指示是否应保留页面内部标记（井号后的内容）。</param>
            <returns>已经去除参数的 uri 字符串。</returns>
            <example>
            <para lang="C#">
            <![CDATA[
            下面的代码演示了如何使用这个方法清除 URL“http://www.thinksea.com/default.aspx?id=1&name=thinksea”的参数部分：
            ]]>
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(Thinksea.Web.ClearUriParameter("http://www.thinksea.com/default.aspx?id=1&name=thinksea", false));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>http://www.thinksea.com/default.aspx
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.ClearUriParameter(System.String)">
            <summary>
            从指定的 URI 删除所有参数，只保留问号“?”之前的部分或者按照参数选择是否保留页面内部定位标记。
            </summary>
            <param name="uri">一个可能包含参数的 uri 字符串。</param>
            <returns>已经去除参数的 uri 字符串。</returns>
            <example>
            <para lang="C#">
            <![CDATA[
            下面的代码演示了如何使用这个方法清除 URL“http://www.thinksea.com/default.aspx?id=1&name=thinksea”的参数部分：
            ]]>
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(Thinksea.Web.ClearUriParameter("http://www.thinksea.com/default.aspx?id=1&name=thinksea"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>http://www.thinksea.com/default.aspx
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.ConvertToJavaScriptString(System.String)">
            <summary>
            将指定的文本转换为 JavaScript 字符串。
            </summary>
            <param name="str">待转换字符串。</param>
            <returns>符合 JavaScript 规则的字符串。此返回结果可以直接与双引号或单引号串联构成标准的 JavaScript 字符串。</returns>
            <example>
            <para lang="C#">
            <![CDATA[
            下面的代码演示了如何使用这个方法转换“<a'b"c>”：
            ]]>
            </para>
            <code lang="C#">
            <![CDATA[this.Response.Write(Thinksea.Web.ConvertToJavaScriptString("<a'b\"c>"));
            ]]>
            </code>
            <para lang="C#">
            输出结果：
            <br/>
            <![CDATA[
            <a\'b\"c>
            ]]>
            </para>
            </example>
        </member>
        <member name="M:Thinksea.Web.IsMobile(System.String)">
            <summary>
            判断用户端访问设备是否手机。
            </summary>
            <param name="userAgent">用户代理字符串。</param>
            <returns>如果是手机则返回 true；否则返回 false。</returns>
            <remarks>
            <see cref="!:http://detectmobilebrowsers.com/"/>
            基于此站点提供的内容修改。
            </remarks>
        </member>
        <member name="M:Thinksea.Web.isMobileOrPad(System.String)">
            <summary>
            判断用户端访问设备是否手机或平板。
            </summary>
            <param name="userAgent">用户代理字符串。</param>
            <returns>如果是则返回 true；否则返回 false。</returns>
            <remarks>
            <see cref="!:http://detectmobilebrowsers.com/"/>
            基于此站点提供的内容修改。
            注意：存在一个已知的BUG，无法得知如何识别微软的 surface 平板设备。
            </remarks>
        </member>
        <member name="M:Thinksea.Web.IsWeixinBrowser(System.String)">
            <summary>
            判断是否在微信浏览器内访问网页。
            </summary>
            <param name="userAgent">用户代理字符串。</param>
            <returns>返回 true；否则返回 false。</returns>
            <remarks>
            支持微信客户端 PC 版。
            </remarks>
        </member>
        <member name="M:Thinksea.Web.#cctor">
            <summary>
            构造方法。
            </summary>
        </member>
    </members>
</doc>
